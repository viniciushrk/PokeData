@page "/listapokemons"
@using Domain.Dto
@using System.Text;
@using Domain.Services
@inject HttpClient Http;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

<PageTitle>PokeData</PageTitle>

<h1 class="mt-5">Pokemons</h1>

<p>Essa página vai ajudar a monitorar os Pokémons capturados ao redor do mundo.</p>

@if (listaPokemon == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex flex-wrap">
        @foreach (var item in listaPokemon)
        {
            <div class="col-md-4 p-2">
                <div class="card">
                    <img class="card-img-top" src="@item.Image" alt="Card image cap">
                    <div class="card-body">
                        <h5 class="card-title">@item.Nome</h5>
                        <p class="card-text">@item.Description</p>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">@item.Type</li>
                        <li class="list-group-item">@item.Generation</li>
                    </ul>
                    <div class="card-body text-center">
                        <button class="btn btn-star" @onclick="(() => ChangeStar(item.Id))"><i class="@starIcon"></i> Stars <span class="badge star-counter" id="star_@item.Id">@item.Stars</span> </button>
                    </div>
                    <div class="card-footer text-center">
                        <a href="/editarpokemon/@item.Id.ToString()" class="btn btn-primary"> <i class="bi bi-pencil-square"></i> Editar </a>
                        <button class="btn btn-danger" @onclick="(() => DeletePokemon(item.Id))"> <i class="bi bi-trash-fill"></i> Excluir </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    Pokemon pokemon = new();
    private List<Pokemon> listaPokemon;

    string starIcon = "bi bi-star";

    protected override async Task OnInitializedAsync()
    {
        listaPokemon = await Http.GetFromJsonAsync<List<Pokemon>>("pokemon");
    }

    public async Task ChangeStar(Guid id)
    {
        var status = await GetStatusStarsPokemon(id);
        if (! status)
        {
          
            var contentString = new StringContent("", Encoding.UTF8, "application/json");
            await Http.PostAsJsonAsync($"pokemon/IncrementStars/{id}", contentString);
            var result = listaPokemon.Where(x => x.Id == id).First();
            result.Stars += 1;
            await localStorage.SetItemAsync(id.ToString(), true);
            starIcon = "bi bi-star-fill";
        }
        else
        {
            var contentString = new StringContent("", Encoding.UTF8, "application/json");
            await Http.PostAsJsonAsync($"pokemon/DecrementStars/{id}", contentString);
            var result = listaPokemon.Where(x => x.Id == id).First();
            result.Stars -= 1;
            await localStorage.SetItemAsync(id.ToString(), false);
            starIcon = "bi bi-star";
        }
    }

    async Task DeletePokemon(Guid id)
    {
        await Http.DeleteAsync($"pokemon/{id}"); 
        var result = listaPokemon.Where(x => x.Id == id).First();
        if (result != null)
            listaPokemon.Remove(result);
    }

    public async Task<bool> GetStatusStarsPokemon(Guid id)
    {
        return await localStorage.GetItemAsync<bool>(id.ToString());
    }
}
